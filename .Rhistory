returns = ts / lag(ts, 1) - 1
strategyReturns = lag(signal, 1) * returns
strategyReturns[is.na(strategyReturns)] = 0
strategyAndBenchmarkReturns = cbind(strategyReturns, returns)
names(strategyAndBenchmarkReturns) = c(strategyName, benchmarkName)
return (strategyAndBenchmarkReturns)
}
adjustedAverage <- function(ts) {
# insert code for adjusted average calculation
result = mean(ts)/sd(ts)
# return result
return (result)
}
computeMovingAverageXover <- function(xtsTimeSeries, fastWindow = 50, slowWindow = 200) {
library("xts");
fastMA = rollapply(data = xtsTimeSeries, width = fastWindow, FUN = mean);
slowMA = rollapply(data = xtsTimeSeries, width = slowWindow, FUN = mean);
return( sign(fastMA - slowMA) )
}
calculateDailyReturn <- function(position = 0, t, ts) {
if (t < 2 | position == 0) {return(0)};
pxYesterday = as.numeric(ts[t-1]);
pxToday = as.numeric(ts[t]);
gain = (pxToday - pxYesterday) * position;
valueYesterday = pxYesterday * abs(position);
return ( gain / valueYesterday )
}
calculateTrade <- function(currentPosition, t, ts, signals, capital) {
tradeToday = as.logical(lag(signals,1)[t]!=signals[t]);
if ( is.na(tradeToday) ) {
return(0)
}
if (tradeToday) {
investmentSize = unitsToInvest(capital,
as.numeric(ts[t]) )$units;
newPosition = investmentSize * as.numeric(signals[t])
return ( newPosition-currentPosition )
} else {
return(0)
}
}
unitsToInvest <- function(capital, pricePerUnit) {
numberOfUnits = capital %/% pricePerUnit;
remainingCapital = capital %% pricePerUnit;
result = list(units = numberOfUnits,
remainingCapital = remainingCapital);
return (result)
}
performanceReporting <- function(xtsTimeSeriesOfReturns) {
library("PerformanceAnalytics")
charts.PerformanceSummary(xtsTimeSeriesOfReturns, geometric = F)
}
# # select price at market close
ts = stock.df$prccd
signals  = computeMovingAverageXover(ts,50,200)
strategyReturns = simpleBacktest(ts,signals)
performanceReporting(strategyReturns)
chosen_stock_conm
library(data.table)
library(lubridate)
library(plotly)
library(xts)
library(quantmod)
library(PerformanceAnalytics)
data1 <- fread("~/Downloads/compustat_security_daily01.csv", stringsAsFactors = F)
head(data1)
data1$datadate<-as.Date(as.character(data1$datadate), format = "%Y%m%d")
head(data1, n = 30)
new_data <- data1[order(conm,iid, datadate)]
head(new_data)
new_data[, lag.price := c(NA, prccd[-.N]), by = list(conm, iid)]
new_data[, daily_return := (prccd - lag.price)/lag.price]
head(new_data)
invisible(lapply(names(new_data),function(.name) set(new_data, which(is.infinite(new_data[[.name]])), j = .name,value =NA)))
new_data$month <- floor_date(new_data$datadate, "month")                        # extract month from date
max_daily_return <-  new_data[is.finite(daily_return)][, max_return := max(daily_return), by = list( conm,iid, month)]
# remove duplicated rows
max_daily_return.uni <- max_daily_return[daily_return == max_return]
max_daily_return.uni <- max_daily_return.uni[!duplicated(max_daily_return.uni[,c("conm","iid", "month","max_return")]), ]
head(max_daily_return[,c("datadate","prccd","month")])
key_date = as.Date("20200501", format = "%Y%m%d")
max_daily_return_May = max_daily_return.uni[month==key_date,]
max_daily_return_May$decile_daily_return_may = cut(max_daily_return_May$daily_return,
breaks = quantile(max_daily_return_May$daily_return,
probs = seq(0,1,length=11), type = 5),
include.lowest = T,
labels = c("10%", "20%", "30%","40%","50%","60%","70%","80%","90%","100%"))
head(max_daily_return_May)
decile_100_stock_return= max_daily_return_May[decile_daily_return_may == '100%']
stock_min_return = decile_100_stock_return[which(decile_100_stock_return$max_return == min(decile_100_stock_return$max_return))]
stock_min_return
head(new_data)
daily_closed_price_stock_min = new_data[new_data$conm==stock_min_return$conm]
head(daily_closed_price_stock_min)
ts_daily_closed_price_stock_min = ts(daily_closed_price_stock_min$prccd)
head(ts_daily_closed_price_stock_min)
fastMA = rollapply(data = ts_daily_closed_price_stock_min, width = 50, FUN = mean)
slowMA = rollapply(data = ts_daily_closed_price_stock_min, width = 200, FUN = mean)
signal = sign(fastMA - slowMA)
simpleBacktest <- function(ts, signal,strategyName="Strategy", benchmarkName="Benchmark") {
returns = ts / lag(ts, 1) - 1
strategyReturns = lag(signal, 1) * returns
strategyReturns[is.na(strategyReturns)] = 0
strategyAndBenchmarkReturns = cbind(strategyReturns, returns)
names(strategyAndBenchmarkReturns) = c(strategyName, benchmarkName)
return (strategyAndBenchmarkReturns)
}
performanceReporting <- function(xtsTimeSeriesOfReturns) {
library("PerformanceAnalytics")
charts.PerformanceSummary(xtsTimeSeriesOfReturns, geometric = F)
}
simpleBacktest(ts_daily_closed_price_stock_min, signal)
library(quantmod)
library("PerformanceAnalytics")
library(data.table)
library("plotly")
library(lubridate)
library(tinytex)
print(Sys.time())
statcoursw_2010_2020 <- fread("~/Downloads/compustat_security_daily01.csv", stringsAsFactors = F)
myR_data = statd_2010_2020
library(quantmod)
library("PerformanceAnalytics")
library(data.table)
library("plotly")
library(lubridate)
library(tinytex)
print(Sys.time())
statcoursw_2010_2020 <- fread("~/Downloads/compustat_security_daily01.csv", stringsAsFactors = F)
myR_data = statcoursw_2010_2020
myR_data$datadate <- as.Date(as.character(new_data$datadate), format = "%Y%m%d")
library(quantmod)
library("PerformanceAnalytics")
library(data.table)
library("plotly")
library(lubridate)
library(tinytex)
print(Sys.time())
statcoursw_2010_2020 <- fread("~/Downloads/compustat_security_daily01.csv", stringsAsFactors = F)
myR_data = statcoursw_2010_2020
myR_data$datadate <- as.Date(as.character(myR_data$datadate), format = "%Y%m%d")
head(myR_data, n=6)
myR_data <- myR_data[order(conm,iid, datadate)]
newversion_Data <- myR_data[, lag.price := c(NA, prccd[-.N]), by = conm]
newversion_Data[, daily_return := (prccd - lag.price)/lag.price]
head(newversion_Data, n=10)
invisible(lapply(names(newversion_Data), function(.name) set(newversion_Data, which(is.infinite(newversion_Data[[.name]])), j = .name,value =NA)))
newversion_Data$month <- floor_date(newversion_Data$datadate, "month")
maximum_daily_return <-  newversion_Data[is.finite(daily_return)][, maximum_daily_return := max(daily_return), by = list(conm,iid, month)]
head(maximum_daily_return, n=30)
maximum_daily_return_new <- maximum_daily_return[daily_return == maximum_return]
require(data.table)
compustat_2010_2020 = fread("~/Downloads/compustat_security_daily01.csv",stringsAsFactors = F)
compustat_2010_2020$datadate = as.Date(as.character(compustat_2010_2020$datadate),format = "%Y%m%d")
compustat_2010_2020[, lag.price := c(NA, prccd[-.N]), by =list(conm,iid)]
compustat_2010_2020[, daily_return := (prccd - lag.price)/lag.price]
head(compustat_2010_2020,n=6)
library(dplyr)
may_daily_return = filter(max_daily_return,month=="2020-05-01") # extract data of may 2020
#setwd("C:/Users/Administrator/Desktop/compustat_security_daily01")
library(data.table)
library(quantmod)
library(dplyr)
library(xts)
library(PerformanceAnalytics)
library(lubridate)
library(knitr)
library(plotly)
source("~/R_practice/week9/functions/backtestFunctions.R")
com<- fread("data.csv",stringsAsFactors = F)
#setwd("C:/Users/Administrator/Desktop/compustat_security_daily01")
library(data.table)
library(quantmod)
library(dplyr)
library(xts)
library(PerformanceAnalytics)
library(lubridate)
library(knitr)
library(plotly)
source("~/R_practice/week9/functions/backtestFunctions.R")
com<- fread("~/Downloads/compustat_security_daily01.csv",stringsAsFactors = F)
is.data.table(com)
head(com)
com$datadate<-as.Date(as.character(com$datadate), format = "%Y%m%d")
com[, "lag1_price" := c(NA, prccd[-.N]), by = list(conm, iid)]
com[, daily_return := (prccd - lag1_price)/lag1_price]
invisible(lapply(names(com),function(.name) set(com, which(is.infinite(com[[.name]])), j = .name,value =NA)))
com$month<-floor_date(com$datadate, "month")
max_ret<-com[is.finite(daily_return)][, max_return := max(daily_return), by = list( conm,iid, month)]
max_ret1<- max_ret[daily_return == max_return]
max_ret1 <- max_ret1[!duplicated(max_ret1[,c("conm","iid", "month","max_return")]), ]
month<- unique(com$month)
max_ret1$mon_dec_cat <- c("")
max_ret1$mon_dec_ran <- c("")
print(max_ret1)
attach(max_ret1)
mnt="2020-05-01"
max_ret1[month==mnt,]$mon_dec_cat=as.character(cut(max_ret1[month==mnt,]$max_return, quantile(max_ret1[month==mnt,]$max_return, probs = c(0:10)/10, type = 5) , include.lowest = TRUE, labels = c("10%", "20%", "30%","40%","50%","60%","70%","80%","90%","100%")))
max_ret1[month==mnt,]$mon_dec_ran <- as.character(cut(max_ret1[month==mnt,]$max_return, quantile( max_ret1[month==mnt,]$max_return, probs = c(0:10)/10, type = 5) , include.lowest = TRUE))
detach(max_ret1)
head(max_ret1[month==mnt])
max_ret1 %>% filter(mon_dec_cat="100%") %>% filter(daily_return == min(daily_return))
max_ret1 %>% filter(mon_dec_cat=="100%") %>% filter(daily_return == min(daily_return))
URHG<- com %>% filter(conm=="UNITED RESOURCES HOLDINGS GR" & iid=="01")
URHG_s = xts(URHG[,6],order.by=URHG$datadate)
fastMA = movingAvg(URHG_s , 50)
slowMA = movingAvg(URHG_s , 200)
signal = sign(fastMA-slowMA)
strategyAndBenchmarkReturns = simpleBacktest(ts, signal)
library(quantmod)
library(dplyr)
library(plotly)
library(tinytex)
library(PerformanceAnalytics)
library(data.table)
library(xts)
library(rmarkdown)
install.packages("lubridate")
library(lubridate)
new_data$month <- floor_date(new_data$datadate, "month")
install.packages("lubridate")
library(quantmod)
library(dplyr)
library(plotly)
library(tinytex)
library(PerformanceAnalytics)
library(data.table)
library(xts)
library(rmarkdown)
install.packages("lubridate")
library(lubridate)
new_data$month <- floor_date(new_data$datadate, "month")
library(quantmod)
library(dplyr)
library(plotly)
#library(tinytex)
library(PerformanceAnalytics)
library(data.table)
library(xts)
#library(rmarkdown)
install.packages("lubridate")
library(lubridate)
new_data$month <- floor_date(new_data$datadate, "month")
#library(quantmod)
library(dplyr)
library(plotly)
#library(tinytex)
library(PerformanceAnalytics)
library(data.table)
library(xts)
#library(rmarkdown)
install.packages("lubridate")
library(lubridate)
new_data$month <- floor_date(new_data$datadate, "month")
install.packages("lubridate")
require(data.table)
require(lubridate)
require(dplyr)
require(xts)
require(PerformanceAnalytics)
compustat_2010_2020 <- fread("~/Downloads/compustat_security_daily01.csv",                               stringsAsFactors = F)
is.data.table(compustat_2010_2020)
compustat_2010_2020$datadate<-as.Date(as.character(compustat_2010_2020$datadate),
format = "%Y%m%d")
new_data <- compustat_2010_2020[order(conm,iid, datadate)]
new_data[, lag.price := c(NA, prccd[-.N]), by = list(conm, iid)]
new_data[, daily_return := (prccd - lag.price)/lag.price]
head(new_data)
new_data$month <- floor_date(new_data$datadate, "month") # extract month from date.
max_daily_return <-  new_data[is.finite(daily_return)][, max_return := max(daily_return), by = list( conm,iid, month)]
# remove duplicated rows
max_daily_return.uni <- max_daily_return[daily_return == max_return]
max_daily_return.uni <- max_daily_return.uni[!duplicated(max_daily_return.uni[,c("conm","iid", "month","max_return")]), ]
month_list <- unique(new_data$month)
max_daily_return.uni$month_decile_cat <- c("")
max_daily_return.uni$month_decile_range <- c("")
ss=head(max_daily_return.uni, n=500)
attach(max_daily_return.uni)
max_daily_return.uni[month=="2020-05-01",]$month_decile_cat <- as.character(cut(max_daily_return.uni[month=="2020-05-01",]$max_return, quantile(max_daily_return.uni[month=="2020-05-01",]$max_return, probs = seq(0,1, length = 11), type = 5) , include.lowest = TRUE, labels = c("10%", "20%", "30%","40%","50%","60%","70%","80%","90%","100%")))
max_daily_return.uni[month=="2020-05-01",]$month_decile_range <- as.character(cut(max_daily_return.uni[month=="2020-05-01",]$max_return, quantile(max_daily_return.uni[month=="2020-05-01",]$max_return, probs = seq(0,1, length = 11), type = 5) , include.lowest = TRUE))
max_daily_return.uni[month=="2020-05-01",] #this is the deciles on the maximum daily returns of stocks in the month May 2020
top10_decile_stock = max_daily_return.uni[max_daily_return.uni$month=="2020-05-01" & max_daily_return.uni$month_decile_cat=="100%",]
#by clicking the 'top10_decile_stock' table and ordering the 'max_return' column by ascending order, I got the stocks with minimum return are 18317 and 165921 in gvkey. They have the same return. In the rest, I will just use 18317 i.e. VERITEQ CORP to do further analysis.
price = new_data %>% filter(gvkey==18317)
ts_price = xts(price, order.by = price$datadate) # not sure what happended here. I wanted to use xts(price[-1]) to get rid of the index number, but in my price table, column1 is actually the second column i.e. gvkey.
ts_price1 = ts_price[,"prccd"]
source("C:/Users/沙烜安/Downloads/backtestFunctions.R")
source("~/R_practice/week9/functions/backtestFunctions.R")
movingAvg =function(ts, window_size = 50){
#code block
MA =ts*NA
for (i in 50 : length(ts))
MA[i] = sum(ts[(i - 49):i])/50
}
ts = ts_price1
names(ts) = "VERITEQ CORP"
ts$`VERITEQ CORP`=as.numeric(ts$`VERITEQ CORP`)
slowMA = movingAvg(ts,200)
ts = ts_price1
slowMA = movingAvg(ts,200)
View(ts)
View(top10_decile_stock)
View(price)
library(data.table)
library(lubridate)
library(dplyr)
library(xts)
library(plotly)
library(quantmod)
library(PerformanceAnalytics)
#library(tinytex)
#library(tidyverse)
#library(knitr)
library(data.table)
compustat_2010_2020 <- fread("~/Downloads/compustat_security_daily01.csv",
stringsAsFactors = F)
compustat_2010_2020$datadate<-as.Date(as.character(compustat_2010_2020$datadate),
format = "%Y%m%d")
head(compustat_2010_2020, n = 6)
new_data = compustat_2010_2020
head(new_data, n=6)
library(data.table)
new_data[, lag.price := c(NA, prccd[-.N]), by = list(conm, iid)]
new_data[, daily_return := (prccd - lag.price)/lag.price]
invisible(lapply(names(new_data),function(.name) set(new_data, which(is.infinite(new_data[[.name]])), j = .name,value =NA)))
library(lubridate)
new_data$month <- floor_date(new_data$datadate, "month")
max_daily_return <-  new_data[is.finite(daily_return)][, max_return := max(daily_return), by = list( conm,iid, month)]
max_daily_return.uni <- max_daily_return[daily_return == max_return]
max_daily_return.uni <- max_daily_return.uni[!duplicated(max_daily_return.uni[,c("conm","iid", "month","max_return")]), ]
max_daily_may_return <- max_daily_return %>% filter(datadate >= as.Date("2020-05-01") & datadate <= as.Date("2020/05/31"))
head(max_daily_may_return, n=6)
month_list <- unique(new_data$month)
max_daily_return.uni$month_decile_cat <- c("")
max_daily_return.uni$month_decile_range <- c("")
attach(max_daily_return.uni)
for (i in 1:(length(month_list)-1)) {
mnt=month_list[i]
max_daily_return.uni[month==mnt,]$month_decile_cat <- as.character(cut(max_daily_return.uni[month==mnt,]$max_return, quantile(max_daily_return.uni[month==mnt,]$max_return, probs = seq(0,1, length = 11), type = 5) , include.lowest = TRUE, labels = c("10%", "20%", "30%","40%","50%","60%","70%","80%","90%","100%")))
max_daily_return.uni[month==mnt,]$month_decile_range <- as.character(cut(max_daily_return.uni[month==mnt,]$max_return, quantile(max_daily_return.uni[month==mnt,]$max_return, probs = seq(0,1, length = 11), type = 5) , include.lowest = TRUE))
}
detach(max_daily_return.uni)
head(max_daily_return.uni)
max_daily_may_return = max_daily_return.uni %>% filter(month == "2020-05-01") %>% select (month, conm, max_return, month_decile_cat, month_decile_range) %>% group_by(month_decile_cat, month_decile_range) %>% distinct()
head(max_daily_may_return, n=6)
stock_10_decile = max_daily_may_return %>% filter(month_decile_cat == "100%") %>% select (conm, max_return, month_decile_cat, month_decile_range) %>% group_by(month_decile_cat, month_decile_range) %>% distinct()
head(stock_10_decile)
tail(stock_10_decile)
min(stock_10_decile$max_return)
selected_stock = stock_10_decile %>% filter(max_return == min(stock_10_decile$max_return) ) %>% select (conm, max_return, month_decile_cat, month_decile_range) %>% group_by(month_decile_cat, month_decile_range) %>% distinct()
selected_stock
URH_daily_closep = new_data %>% filter(conm == "UNITED RESOURCES HOLDINGS GR")
URH_daily_closep.xts <- xts(URH_daily_closep$prccd, order.by = as.Date(URH_daily_closep$datadate))
source("~/R_practice/week9/functions/backtestFunctions.R")
detach("package:dplyr", unload = TRUE)
fastMA = rollapply(data = URH_daily_closep.xts, width = 50, FUN = mean)
slowMA = rollapply(data = URH_daily_closep.xts, width = 200, FUN = mean)
signal = sign(fastMA - slowMA)
simpleBacktest(URH_daily_closep.xts, signal, strategyName = "URH_daily_closep", benchmarkName = "Benchmark")
strategyAndBenchmarkReturns = simpleBacktest(URH_daily_closep.xts, signal,strategyName = "URH_daily_closep", benchmarkName = "Benchmark" )
strategyAndBenchmarkReturns[!is.finite(strategyAndBenchmarkReturns)] = 0
charts.PerformanceSummary(strategyAndBenchmarkReturns, geometric = FALSE)
library(data.table)
library(lubridate)
library(xts)
library(plotly)
library(quantmod)
library(PerformanceAnalytics)
library(tinytex)
Stocks_stat <- fread("~/Downloads/compustat_security_daily01.csv", stringsAsFactors = F)
if (!is.data.table(Stocks_stat)) {
setDT(Stocks_stat)
}
head(Stocks_stat, n=3)
which(is.infinite(Stocks_stat$prccd))
Stocks_stat$datadate <- as.Date(as.character(Stocks_stat$datadate),
format = "%Y%m%d")
CleanStocks_stat <- Stocks_stat[order(conm, datadate)]
CleanStocks_stat <- CleanStocks_stat[, lag.price := c(NA, prccd[-.N]), by = conm]
CleanStocks_stat <- CleanStocks_stat[, daily_return := (prccd - lag.price)/lag.price]
head(CleanStocks_stat)
CleanStocks_stat <- CleanStocks_stat[is.finite(CleanStocks_stat$daily_return)]
CleanStocks_stat$month <- floor_date(CleanStocks_stat$datadate, "month")
max_daily_return <- CleanStocks_stat[is.finite(daily_return)][, max_return := max(daily_return), by = list(conm,iid,month)]
max_daily_return.only <- max_daily_return[daily_return == max_return]
max_daily_return.only <- max_daily_return.only[!duplicated(max_daily_return.only[,c("conm","iid", "month","max_return")]), ]
knitr::kable(
head(max_daily_return_only[,c("datadate","prccd","month")]),
caption="Maximum daily return of the month"
)
max_returns_April2020 <- max_daily_return.only %>% filter(month == "2020-04-01")
head(max_returns_April2020, n = 30)
print(date())
max_returns_April2020$April2020_decile_cat <- c("")
max_returns_April2020$April2020_decile_range <- c("")
max_returns_April2020$April2020_decile_cat <- as.character(cut(max_returns_April2020$max_return, quantile(max_returns_April2020$max_return, probs = seq(0,1, length = 11), type = 4) , include.lowest = TRUE,
labels = c("10%", "20%","30%","40%","50%","60%","70%","80%","90%","100%")))
max_returns_April2020$April2020_decile_range <- as.character(cut(max_returns_April2020$max_return, quantile(max_returns_April2020$max_return, probs = seq(0,1, length = 11), type = 4) , include.lowest = TRUE))
TopDecile_April <- max_returns_April2020 %>% filter(April2020_decile_cat == "100%")
knitr::kable(
head(TopDecile_April,n=100),
caption="Stocks of the Top 10% Decile"
)
Minimal_TopDec_Return_April <-  TopDecile[TopDecile_April$max_return == min(TopDecile_April$max_return)]
TopDecile_April <- max_returns_April2020 %>% filter(April2020_decile_cat == "100%")
knitr::kable(
head(TopDecile_April,n=100),
caption="Stocks of the Top 10% Decile"
)
Minimal_TopDec_Return_April <-  TopDecile_April[TopDecile_April$max_return == min(TopDecile_April$max_return)]
head(Minimal_TopDec_Return_April)
library(lubridate)
library(dplyr)
library(PerformanceAnalytics)
library(quantmod)
library(xts)
library(data.table)
library(plotly)
library(xts)
security_daily <- fread("~/Downloads/compustat_security_daily01.csv", stringsAsFactors = F)
head(security_daily)
new_data <- security_daily[order(conm,iid, datadate)]
new_data[, lag.price := c(NA, prccd[-.N]), by = list(conm, iid)]
new_data[, daily_return := (prccd - lag.price)/lag.price]
head(new_data)
new_data$datadate <- as.Date(as.character(new_data$datadate), format = "%Y%m%d")
head(new_data, n = 30)
new_data$month <- floor_date(new_data$datadate, "month")
max_daily_return <-  new_data[is.finite(daily_return)][, max_return := max(daily_return), by = list( conm,iid, month)]
#remove duplicate rows
max_daily_return.uni <- max_daily_return[daily_return == max_return]
max_daily_return.uni <- max_daily_return.uni[!duplicated(max_daily_return.uni[,c("conm","iid", "month","max_return")]), ]
head(max_daily_return[,c("datadate","prccd","month")])
key_date = as.Date("20200501", format = "%Y%m%d")
maxdailyreturn_May = max_daily_return.uni[month==key_date,]
maxdailyreturn_May$decile_daily_return_may = cut(maxdailyreturn_May$daily_return,
breaks = quantile(maxdailyreturn_May$daily_return,
probs = seq(0,1,length=11), type = 5),
include.lowest = T,
labels = c("10%", "20%", "30%","40%","50%","60%","70%","80%","90%","100%"))
head(maxdailyreturn_May)
mintop10_return = maxdailyreturn_May[decile_daily_return_may == '100%']
min_return = mintop10_return[which(mintop10_return$max_return == min(mintop10_return$max_return))]
min_return
close_price = new_data[new_data$conm==min_return$conm]
head(close_price)
ts_close_price = ts(close_price$prccd)
head(ts_close_price)
simpleBacktest <- function(ts, signal,strategyName="Strategy", benchmarkName="Benchmark") {
returns = ts / lag(ts, 1) - 1
strategyReturns = lag(signal, 1) * returns
strategyReturns[is.na(strategyReturns)] = 0
strategyAndBenchmarkReturns = cbind(strategyReturns, returns)
names(strategyAndBenchmarkReturns) = c(strategyName, benchmarkName)
return (strategyAndBenchmarkReturns)
}
plot(1:5,seq(1,10,length=5),type="n",xlab="",ylab="",main="Test draw.circle")
plot(1:5,seq(1,10,length=5),type="n",xlab="",ylab="",main="Test draw.circle")
draw.circle(2,4,c(1,0.66,0.33),border="purple",
col=c("#ff00ff","#ff77ff","#ffccff"),lty=1,lwd=1)
plot(1:5,seq(1,10,length=5),type="n",xlab="",ylab="",main="Test draw.circle")
sin(30)
sin(1.57)
sin(2*pi)
pi
cos(2*pi)
cos(pi)
thetha = seq(0,2*pi,by = 0.1)
x = cos(thetha)
y = sin(thetha)
plot(x,y)
thetha = seq(0,2*pi,by = 0.1)
x = cos(thetha)
y = sin(thetha)
plot(x,y,type = "line")
thetha = seq(0,2*pi,by = 0.1)
x = cos(thetha)
y = sin(thetha)
plot(x,y,type = "l")
thetha = seq(0,2*pi,by = 0.01)
x = cos(thetha)
y = sin(thetha)
plot(x,y,type = "l")
plot(x,y,type = "l")
data = read.csv("~/Work/Other_projects/JD/cn_law/case_results/results_12.csv")
View(data)
data = read.csv("~/Work/Other_projects/JD/cn_law/case_results/results_12.csv", sep = "\t")
View(data)
data = read.csv("~/Work/Other_projects/JD/cn_law/case_results/results_12.csv", sep = "\t", header = NULL)
data = read.csv("~/Work/Other_projects/JD/cn_law/case_results/results_12.csv", sep = "\t", header = F)
View(data)
tmp = data[grepl("电子|公司",data$V2),]
View(tmp)
tmp = data[grepl("电子",data$V2) | grepl("电子",data$V3),]
View(tmp)
tmp = data[grepl("电子",data$V2) ,]
View(tmp)
tmp = data[grepl("电子|材料",data$V2) | grepl("电子|材料",data$V3),]
View(tmp)
drv = dbDriver("SQLite")
library(readxl)
library(dplyr)
library(data.table)
library(RSQLite)
drv = dbDriver("SQLite")
con = dbConnect(drv, "~/Downloads/merge_ms_cases_companies_content.db")
cases2 = dbGetQuery(con, "select * from mergedmscasescontent")
dbDisconnect(con)
head(cases2, n = 40)
substr("2020-05-04", 1, 6)
substr("2020-05-04", 1, 7)
substr(as.Date("2020-05-04"), 1, 7)
